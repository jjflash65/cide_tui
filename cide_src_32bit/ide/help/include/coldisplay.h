/* ---------------------- coldisplay.h ------------------------

   Anbindung TFT Display fuer Displaycontroller:

                    Aufloesung 160 x 128

                            S6D02A1
                            ST7735R

                    Aufloesung 128 x 128

                            ILI9163

   fuer AVR-Mikrocontroller  (ATMega 48 / 88 / 168 / 328)

   15.01.2015 R. Seelig
   ------------------------------------------------------------ */

//-------------------------------------------------------------
// Hardwareanbindung
//-------------------------------------------------------------

// SPI Interface
// die PIN-Definitionen des SPI duerfen nicht geaendert werden,
// weil die besonderen Funktionen der Pin's (MOSI,SCK und SS
// verwendet werden !



#ifndef incoldisplay
  #define incoldisplay

  #include "m328ports.h"
  #include <util/delay.h>
  #include <avr/io.h>
  #include <avr/pgmspace.h>
  #include <stdio.h>
  #include <stdlib.h>


//  #define st7735r                      // wenn das Farbdisplay diesen Controller hat
                                          // die Auskommentierung aufheben damit das
                                          // Array mit den Initialisierungswerten
                                          // st7735red_seq verfuegbar ist

//  #define yres128                                     // wenn die Aufloesung in Y-Achse 128 Pixel
                                                        // anstelle von 160 Pixel betraegt (ILI9163)


  #define ili9163                       s6d02a_seq


  #define SPI_DDR			DDRB
  #define SPI_MOSI_PIN		        PB3
  #define SPI_CLK_PIN			PB5
  #define SPI_SS_PIN			PB2

  #define LCD_PORT			PORTB
  #define LCD_DDR			DDRB
  #define LCD_RST_PIN			PB0
  #define LCD_DC_PIN			PB1
  #define LCD_CE_PIN			PB2             // Already SS SPI pin

  #define _width   128
  #define _height  160

  #define fontsizex   8
  #define fontsizey   8

  #define black           0
  #define blue            1
  #define green           2
  #define cyan            3
  #define red             4
  #define magenta         5
  #define brown           6
  #define grey            7
  #define darkgrey        8
  #define lightblue       9
  #define lightgreen      10
  #define lightcyan       11
  #define lightred        12
  #define lightmagenta    13
  #define yellow          14
  #define white           15

  // --------------------------------------------------------------
  // Initialisierungssequenzen
  // --------------------------------------------------------------

  #define delay_flag 0x80           // Markierungsflag: bestimmt, ob nach einem Kommando
                                    // eine Warteschleife durchlaufen werden soll oder nicht

  #ifdef st7735r

  static const uint8_t PROGMEM st7735red_seq[] =          // Initialisierungssequenzen
  {
      21,                                                 // Anzahl Gesamtkommandos

      0x01, delay_flag,150,
      0x11, delay_flag,255,
      0xb1, 3, 0x01, 0x2C, 0x2D,
      0xb2, 3, 0x01, 0x2C, 0x2D,
      0xb3, 6, 0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D,
      0xb4, 1, 0x07,
      0xc0, 3, 0xA2, 0x02, 0x84,
      0xc1, 1, 0xC5,
      0xc2, 2, 0x0A, 0x00,
      0xc3, 2, 0x8A, 0x2A,
      0xc4, 2, 0x8A, 0xEE,
      0xc5, 1, 0x0E,
      0x20, 0,
      0x36, 1, 0xc0,                                      // 00 fuer auf dem Kopf stehend
      0x3a, 1+delay_flag, 0x05,10,

      0x2a, 4, 0x00, 0x00, 0x00, 0x7F,
      0x2b, 4, 0x00, 0x00, 0x00, 0x9F,

      0xe0, 16, 0x02, 0x1c, 0x07, 0x12, 0x37, 0x32, 0x29, 0x2d,
                0x29, 0x25, 0x2B, 0x39, 0x00, 0x01, 0x03, 0x10,
      0xe1, 16, 0x03, 0x1d, 0x07, 0x06, 0x2E, 0x2C, 0x29, 0x2D,
                0x2E, 0x2E, 0x37, 0x3F, 0x00, 0x00, 0x02, 0x10,
      0x13, delay_flag,10,
      0x29, delay_flag,100,
  };

  #else
  static const uint8_t PROGMEM s6d02a_seq[] =          // Initialisierungssequenzen
  {
    29,                                                // Anzahl Gesamtkommandos

  /*
    Byte 0 | Byte 1       | Byte 2 u. folgende | evtl. Delaytime-Byte
    CMD    | Anzahl Datas | Datas | evtl. Delaytime
  */

    0xf0, 2,0x5a,0x5a,
    0xfc, 2,0x5a,0x5a,                                                                   // Excommand3
    0x26, 1,0x01,                                                                        // Gammaset
    0xfa, 15,0x02,0x1f,0x00,0x10,0x22,0x30,0x38,0x3A,0x3A,0x3A,0x3A,0x3A,0x3d,0x02,0x01, // Positivegammacontrol
    0xfb, 15,0x21,0x00,0x02,0x04,0x07,0x0a,0x0b,0x0c,0x0c,0x16,0x1e,0x30,0x3f,0x01,0x02, // Negativegammacontrol
    0xfd, 11,0x00,0x00,0x00,0x17,0x10,0x00,0x01,0x01,0x00,0x1f,0x1f,                     // Analogparametercontrol
    0xf4, 15,0x00,0x00,0x00,0x00,0x00,0x3f,0x3f,0x07,0x00,0x3C,0x36,0x00,0x3C,0x36,0x00, // Powercontrol
    0xf5, 13,0x00,0x70,0x66,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6d,0x66,0x06,           // VCOMcontrol
    0xf6, 11,0x02,0x00,0x3f,0x00,0x00,0x00,0x02,0x00,0x06,0x01,0x00,                     // Sourcecontrol
                                                                                         // Displaycontrol
    0xf2, 17,0x00,0x01,0x03,0x08,0x08,0x04,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x04,0x08,0x08,
    0xf8, 1, 0x11,                                                                       // Gatecontrol
    0xf7, 4,0xc8,0x20,0x00,0x00,                                                         //Interfacecontrol
    0xf3, 2,0x00,0x00,                                                                   //Powersequencecontrol
    0x11, delay_flag,50,                                                                 //Wake
    0xf3, 2+delay_flag,0x00,0x01,50,                                                     //Powersequencecontrol
    0xf3, 2+delay_flag,0x00,0x03,50,
    0xf3, 2+delay_flag,0x00,0x07,50,
    0xf3, 2+delay_flag,0x00,0x0f,50,
    0xf4, 15+delay_flag,0x00,0x04,0x00,0x00,0x00,0x3f,0x3f,0x07,0x00,0x3C,0x36,0x00,0x3C,0x36,0x00,50,
    0xf3, 2+delay_flag,0x00,0x1f,50,
    0xf3, 2+delay_flag,0x00,0x7f,50,
    0xf3, 2+delay_flag,0x00,0xff,50,
    0xfd, 11,0x00,0x00,0x00,0x17,0x10,0x00,0x00,0x01,0x00,0x16,0x16,                     // Analogparametercontrol
    0xf4, 15,0x00,0x09,0x00,0x00,0x00,0x3f,0x3f,0x07,0x00,0x3C,0x36,0x00,0x3C,0x36,0x00,
    0x36, 1,0x08,                                                                        //Memoryaccessdatacontrol
    0x35, 1,0x00,                                                                        //Tearingeffectlineon
    0x3a, 1+delay_flag,0x05,150,                                                         //Interfacepixelcontrol
    0x29,0,                                                                              //Displayon
    0x2c,0                                                                               //Memorywrite
  };

  #endif

  // --------------------------------------------------------------
  // Zeichensatz
  // --------------------------------------------------------------


  /* Bitmaps des Ascii-Zeichensatzes
     ein Smily wuerde so aussehen:
        { 0x36, 0x46, 0x40, 0x46, 0x36 }  // Smiley

     ein grosses A ist folgendermassen definiert:

     { 0x7E, 0x11, 0x11, 0x11, 0x7E }

     . x x x x x x .
     . . . x . . . x
     . . . x . . . x
     . . . x . . . x
     . x x x x x x .

  */


  static const unsigned font[][8] PROGMEM={

  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},      // 0x20     Leerzeichen
  {0x30,0x78,0x78,0x30,0x30,0x00,0x30,0x00},	// 0x21     !
  {0x6C,0x6C,0x6C,0x00,0x00,0x00,0x00,0x00},	// 0x22     "
  {0x6C,0x6C,0xFE,0x6C,0xFE,0x6C,0x6C,0x00},	// 0x23     #
  {0x30,0x7C,0xC0,0x78,0x0C,0xF8,0x30,0x00},	// 0x24     $
  {0x00,0xC6,0xCC,0x18,0x30,0x66,0xC6,0x00},	// 0x25     %
  {0x38,0x6C,0x38,0x76,0xDC,0xCC,0x76,0x00},	// 0x26     &
  {0x60,0x60,0xC0,0x00,0x00,0x00,0x00,0x00},	// 0x27     '
  {0x18,0x30,0x60,0x60,0x60,0x30,0x18,0x00},	// 0x28     (
  {0x60,0x30,0x18,0x18,0x18,0x30,0x60,0x00},	// 0x29     )
  {0x00,0x66,0x3C,0xFF,0x3C,0x66,0x00,0x00},	// 0x2A     *
  {0x00,0x30,0x30,0xFC,0x30,0x30,0x00,0x00},	// 0x2B     +
  {0x00,0x00,0x00,0x00,0x00,0x70,0x30,0x60},	// 0x2C     ,
  {0x00,0x00,0x00,0xFC,0x00,0x00,0x00,0x00},	// 0x2D     -
  {0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00},	// 0x2E     .
  {0x06,0x0C,0x18,0x30,0x60,0xC0,0x80,0x00},	// 0x2F     /
  {0x78,0xCC,0xDC,0xFC,0xEC,0xCC,0x78,0x00},	// 0x30     0
  {0x30,0xF0,0x30,0x30,0x30,0x30,0xFC,0x00},	// 0x31     1
  {0x78,0xCC,0x0C,0x38,0x60,0xCC,0xFC,0x00},	// 0x32     2
  {0x78,0xCC,0x0C,0x38,0x0C,0xCC,0x78,0x00},	// 0x33     3
  {0x1C,0x3C,0x6C,0xCC,0xFE,0x0C,0x0C,0x00},	// 0x34     4
  {0xFC,0xC0,0xF8,0x0C,0x0C,0xCC,0x78,0x00},	// 0x35     5
  {0x38,0x60,0xC0,0xF8,0xCC,0xCC,0x78,0x00},	// 0x36     6
  {0xFC,0xCC,0x0C,0x18,0x30,0x60,0x60,0x00},	// 0x37     7
  {0x78,0xCC,0xCC,0x78,0xCC,0xCC,0x78,0x00},	// 0x38     8
  {0x78,0xCC,0xCC,0x7C,0x0C,0x18,0x70,0x00},	// 0x39     9
  {0x00,0x00,0x30,0x30,0x00,0x30,0x30,0x00},	// 0x3A     :
  {0x00,0x00,0x30,0x30,0x00,0x70,0x30,0x60},	// 0x3B     ;
  {0x18,0x30,0x60,0xC0,0x60,0x30,0x18,0x00},	// 0x3C     <
  {0x00,0x00,0xFC,0x00,0xFC,0x00,0x00,0x00},	// 0x3D     =
  {0x60,0x30,0x18,0x0C,0x18,0x30,0x60,0x00},	// 0x3E     >
  {0x78,0xCC,0x0C,0x18,0x30,0x00,0x30,0x00},	// 0x3F     ?
  {0x7C,0xC6,0xDE,0xDE,0xDE,0xC0,0x78,0x00},	// 0x40     @
  {0x30,0x78,0xCC,0xCC,0xFC,0xCC,0xCC,0x00},	// 0x41     A
  {0xFC,0x66,0x66,0x7C,0x66,0x66,0xFC,0x00},	// 0x42     B
  {0x3C,0x66,0xC0,0xC0,0xC0,0x66,0x3C,0x00},	// 0x43     C
  {0xFC,0x6C,0x66,0x66,0x66,0x6C,0xFC,0x00},	// 0x44     D
  {0xFE,0x62,0x68,0x78,0x68,0x62,0xFE,0x00},	// 0x45     E
  {0xFE,0x62,0x68,0x78,0x68,0x60,0xF0,0x00},	// 0x46     F
  {0x3C,0x66,0xC0,0xC0,0xCE,0x66,0x3E,0x00},	// 0x47     G
  {0xCC,0xCC,0xCC,0xFC,0xCC,0xCC,0xCC,0x00},	// 0x48     H
  {0x78,0x30,0x30,0x30,0x30,0x30,0x78,0x00},	// 0x49     I
  {0x1E,0x0C,0x0C,0x0C,0xCC,0xCC,0x78,0x00},	// 0x4A     J
  {0xE6,0x66,0x6C,0x78,0x6C,0x66,0xE6,0x00},	// 0x4B     K
  {0xF0,0x60,0x60,0x60,0x62,0x66,0xFE,0x00},	// 0x4C     L
  {0xC6,0xEE,0xFE,0xD6,0xC6,0xC6,0xC6,0x00},	// 0x4D     M
  {0xC6,0xE6,0xF6,0xDE,0xCE,0xC6,0xC6,0x00},	// 0x4E     N
  {0x38,0x6C,0xC6,0xC6,0xC6,0x6C,0x38,0x00},	// 0x4F     O
  {0xFC,0x66,0x66,0x7C,0x60,0x60,0xF0,0x00},	// 0x50     P
  {0x78,0xCC,0xCC,0xCC,0xDC,0x78,0x1C,0x00},	// 0x51     Q
  {0xFC,0x66,0x66,0x7C,0x78,0x6C,0xE6,0x00},	// 0x52     R
  {0x78,0xCC,0xE0,0x38,0x1C,0xCC,0x78,0x00},	// 0x53     S
  {0xFC,0xB4,0x30,0x30,0x30,0x30,0x78,0x00},	// 0x54     T
  {0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0xFC,0x00},	// 0x55     U
  {0xCC,0xCC,0xCC,0xCC,0xCC,0x78,0x30,0x00},	// 0x56     V
  {0xC6,0xC6,0xC6,0xD6,0xFE,0xEE,0xC6,0x00},	// 0x57     W
  {0xC6,0xC6,0x6C,0x38,0x6C,0xC6,0xC6,0x00},	// 0x58     X
  {0xCC,0xCC,0xCC,0x78,0x30,0x30,0x78,0x00},	// 0x59     Y
  {0xFE,0xCC,0x98,0x30,0x62,0xC6,0xFE,0x00},	// 0x5A     Z
  {0x78,0x60,0x60,0x60,0x60,0x60,0x78,0x00},	// 0x5B     [
  {0xC0,0x60,0x30,0x18,0x0C,0x06,0x02,0x00},	// 0x5C     Backslash
  {0x78,0x18,0x18,0x18,0x18,0x18,0x78,0x00},	// 0x5D     ]
  {0x10,0x38,0x6C,0xC6,0x00,0x00,0x00,0x00},	// 0x5E     ^
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF},	// 0x5F     _
  {0x30,0x30,0x18,0x00,0x00,0x00,0x00,0x00},	// 0x60     `
  {0x00,0x00,0x78,0x0C,0x7C,0xCC,0x76,0x00},	// 0x61     a
  {0xE0,0x60,0x7C,0x66,0x66,0x66,0xFC,0x00},	// 0x62     b
  {0x00,0x00,0x78,0xCC,0xC0,0xCC,0x78,0x00},	// 0x63     c
  {0x1C,0x0C,0x0C,0x7C,0xCC,0xCC,0x76,0x00},	// 0x64     d
  {0x00,0x00,0x78,0xCC,0xFC,0xC0,0x78,0x00},	// 0x65     e
  {0x38,0x6C,0x60,0xF0,0x60,0x60,0xF0,0x00},	// 0x66     f
  {0x00,0x00,0x76,0xCC,0xCC,0x7C,0x0C,0xF8},	// 0x67     g
  {0xE0,0x60,0x6C,0x76,0x66,0x66,0xE6,0x00},	// 0x68     h
  {0x30,0x00,0x70,0x30,0x30,0x30,0x78,0x00},	// 0x69     i
  {0x18,0x00,0x78,0x18,0x18,0x18,0xD8,0x70},	// 0x6A     j
  {0xE0,0x60,0x66,0x6C,0x78,0x6C,0xE6,0x00},	// 0x6B     k
  {0x70,0x30,0x30,0x30,0x30,0x30,0x78,0x00},	// 0x6C     l
  {0x00,0x00,0xEC,0xFE,0xD6,0xC6,0xC6,0x00},	// 0x6D     m
  {0x00,0x00,0xF8,0xCC,0xCC,0xCC,0xCC,0x00},	// 0x6E     n
  {0x00,0x00,0x78,0xCC,0xCC,0xCC,0x78,0x00},	// 0x6F     o
  {0x00,0x00,0xDC,0x66,0x66,0x7C,0x60,0xF0},	// 0x70     p
  {0x00,0x00,0x76,0xCC,0xCC,0x7C,0x0C,0x1E},	// 0x71     q
  {0x00,0x00,0xD8,0x6C,0x6C,0x60,0xF0,0x00},	// 0x72     r
  {0x00,0x00,0x7C,0xC0,0x78,0x0C,0xF8,0x00},	// 0x73     s
  {0x10,0x30,0x7C,0x30,0x30,0x34,0x18,0x00},	// 0x74     t
  {0x00,0x00,0xCC,0xCC,0xCC,0xCC,0x76,0x00},	// 0x75     u
  {0x00,0x00,0xCC,0xCC,0xCC,0x78,0x30,0x00},	// 0x76     v
  {0x00,0x00,0xC6,0xC6,0xD6,0xFE,0x6C,0x00},	// 0x77     w
  {0x00,0x00,0xC6,0x6C,0x38,0x6C,0xC6,0x00},	// 0x78     x
  {0x00,0x00,0xCC,0xCC,0xCC,0x7C,0x0C,0xF8},	// 0x79     y
  {0x00,0x00,0xFC,0x98,0x30,0x64,0xFC,0x00},	// 0x7A     z
  {0x1C,0x30,0x30,0xE0,0x30,0x30,0x1C,0x00},	// 0x7B     {
  {0x18,0x18,0x18,0x00,0x18,0x18,0x18,0x00},	// 0x7C
  {0xE0,0x30,0x30,0x1C,0x30,0x30,0xE0,0x00},	// 0x7D     }
  {0x76,0xDC,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x7E
  {0x10,0x38,0x6C,0xC6,0xC6,0xC6,0xFE,0x00},	// 0x7F
  {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},      // 0x80     ausgefuelltes Quadrat
  {0x70,0xd8,0xd8,0x70,0x00,0x00,0x00,0x00},      // 0x81     Grad Celcius Zeichen
  {0x38,0x44,0x82,0x44,0x28,0xaa,0xee,0x00}       // 0x82     Ohm - Zeichen
  };



  extern uint16_t egapalette [];    // die "alten" Farbdefinitionen eines DOS PC's

  extern uint8_t aktxp;             // Beinhaltet die aktuelle Position des Textcursors in X-Achse
  extern uint8_t aktyp;             // dto. fuer die Y-Achse
  extern uint16_t textcolor;        // Beinhaltet die Farbwahl fuer die Vordergrundfarbe
  extern uint16_t bkcolor;          // dto. fuer die Hintergrundfarbe
  extern uint8_t outmode;
  extern uint8_t textsize;          // Skalierung der Ausgabeschriftgroesse

  // --------------------------------------------------------------
  // Prototypen
  // --------------------------------------------------------------

  void spi_init(void);
  unsigned char spi_out(unsigned char data);
  void wrcmd(uint8_t cmd);
  void wrdata(uint8_t cmd);
  uint16_t rgbfromvalue(uint8_t r, uint8_t g, uint8_t b);
  uint16_t rgbfromega(uint8_t entry);
  void lcd160_init(const uint8_t *tabseq);
  void lcd_setramaddr(uint8_t x0, uint8_t y0);
  void fastxline(uint8_t x1, uint8_t y1, uint8_t x2, uint16_t color);
  void fillrect(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint16_t color);
  void clrscr();
  void putpixel(int16_t x, int16_t y, uint16_t color);
  void showimage(char ox, char oy, const unsigned char* const image, uint16_t fwert);
  void gotoxy(unsigned char x, unsigned char y);
  void lcd_putchar(uint8_t ch);
  void lcd_putcharxy(uint8_t oldx, uint8_t oldy, unsigned char ch);
  void outtextxy(int x, int y, const unsigned char *dataPtr);
  void line(int x0, int y0, int x1, int y1, uint16_t color);
  void rectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint16_t color);
  void ellipse(int xm, int ym, int a, int b, uint16_t color );
  void circle(int x, int y, int r, uint16_t color );
  void fillellipse(int xm, int ym, int a, int b, uint16_t color );
  void fillcircle(int x, int y, int r, uint16_t color );
  void putromstring(const unsigned char *dataPtr);
  void putramstring(char *c);
  int lcd_fileout(char ch, FILE *stream);
  static FILE lcd_out = FDEV_SETUP_STREAM(lcd_fileout,NULL,_FDEV_SETUP_WRITE);	// einen Stream zuordnen

  // Macros fuer die Stringausgabe

  #define prints_lcd(tx)       (putromstring(PSTR(tx)))
  #define col_prints(tx)       (putromstring(PSTR(tx)))
  #define outprintsxy(x,y,tx)  (outtextxy(x,y,PSTR(tx)))

#endif
